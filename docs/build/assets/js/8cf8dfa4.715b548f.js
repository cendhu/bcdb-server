"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8836],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return k}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=d(n),k=r,h=c["".concat(l,".").concat(k)]||c[k]||u[k]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7014:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return p},default:function(){return c}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],s={id:"datatx",title:"Data Transaction"},l="Data Transaction",d={unversionedId:"external/getting-started/transactions/curl/datatx",id:"external/getting-started/transactions/curl/datatx",isDocsHomePage:!1,title:"Data Transaction",description:"We can store, update, delete any state, i.e., key-value pair, on the ledger by issuing a data transaction.",source:"@site/docs/external/getting-started/transactions/curl/datatx.md",sourceDirName:"external/getting-started/transactions/curl",slug:"/external/getting-started/transactions/curl/datatx",permalink:"/orion-server/docs/external/getting-started/transactions/curl/datatx",tags:[],version:"current",frontMatter:{id:"datatx",title:"Data Transaction"},sidebar:"Documentation",previous:{title:"User Administration Transaction",permalink:"/orion-server/docs/external/getting-started/transactions/curl/usertx"},next:{title:"Cluster Configuration Transaction",permalink:"/orion-server/docs/external/getting-started/transactions/curl/configtx"}},p=[{value:"Storing a new state",id:"storing-a-new-state",children:[{value:"Checking the existance of the state",id:"checking-the-existance-of-the-state",children:[],level:3}],level:2},{value:"Updating an existing state",id:"updating-an-existing-state",children:[{value:"Checking the existance of the updated key",id:"checking-the-existance-of-the-updated-key",children:[],level:3}],level:2},{value:"Deleting an existing state",id:"deleting-an-existing-state",children:[{value:"Checking the non-existance of the deleted key",id:"checking-the-non-existance-of-the-deleted-key",children:[],level:3}],level:2},{value:"Storing, Updating, Deleting states within a single transaction",id:"storing-updating-deleting-states-within-a-single-transaction",children:[],level:2},{value:"Invalid Data Transaction",id:"invalid-data-transaction",children:[],level:2}],u={toc:p};function c(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"data-transaction"},"Data Transaction"),(0,i.kt)("p",null,"We can store, update, delete any state, i.e., key-value pair, on the ledger by issuing a data transaction.\nBy submitting a ",(0,i.kt)("inlineCode",{parentName:"p"},"POST /data/tx {txPaylod}"),", we can perform a data transaction where ",(0,i.kt)("inlineCode",{parentName:"p"},"txPayload")," contains reads, writes, and deletes of states."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"As a prerequisite, we need to create users ",(0,i.kt)("inlineCode",{parentName:"p"},"alice")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"bob"),". Refer ",(0,i.kt)("a",{parentName:"p",href:"/orion-server/docs/external/getting-started/transactions/curl/usertx"},"here")," for examples on creating users. Further, the node\nshould have a user database named ",(0,i.kt)("inlineCode",{parentName:"p"},"db2"),". Refer ",(0,i.kt)("a",{parentName:"p",href:"/orion-server/docs/external/getting-started/transactions/curl/dbtx"},"here")," for examples on creating databases.")),(0,i.kt)("h2",{id:"storing-a-new-state"},"Storing a new state"),(0,i.kt)("p",null,"Let's store a new state with the key ",(0,i.kt)("inlineCode",{parentName:"p"},"key1"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},' curl \\\n   -H "Content-Type: application/json" \\\n   -H "TxTimeout: 2s" \\\n   -X POST http://127.0.0.1:6001/data/tx \\\n   --data \'{\n    "payload": {\n        "must_sign_user_ids": [\n            "alice"\n        ],\n        "tx_id": "1b6d6414-9b58-45d0-9723-1f31712add81",\n        "db_operations": [\n            {\n                "db_name": "db2",\n                "data_writes": [\n                    {\n                        "key": "key1",\n                        "value": "eXl5",\n                        "acl": {\n                            "read_users": {\n                                "alice": true,\n                                "bob": true\n                            },\n                            "read_write_users": {\n                                "alice": true\n                            }\n                        }\n                    }\n                ]\n            }\n        ]\n    },\n    "signatures": {\n        "alice": "MEQCIAM/FYzdfVlQGWBPcyDMp2BRDyzQdTdusOl0M/UBCk2gAiAxns+4m30Y/HzlO0e0dK0HnaWhbxch5tUys0P0ME7ZPw=="\n    }\n}\'\n')),(0,i.kt)("p",null,"The payload contains ",(0,i.kt)("inlineCode",{parentName:"p"},"must_sign_user_ids")," which is a list of user ids who must sign the transaction's payload. The\n",(0,i.kt)("inlineCode",{parentName:"p"},"db_operations")," hold the ",(0,i.kt)("inlineCode",{parentName:"p"},"data_writes")," to be applied on the specified ",(0,i.kt)("inlineCode",{parentName:"p"},"db_name"),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"data_writes")," must\nbe encoded in base64. The ",(0,i.kt)("inlineCode",{parentName:"p"},"acl")," contains list of users in the ",(0,i.kt)("inlineCode",{parentName:"p"},"read_users")," who can read-only the state and a list of\nusers in the ",(0,i.kt)("inlineCode",{parentName:"p"},"read_write_users")," who can both read and write to the state. Here, the ",(0,i.kt)("inlineCode",{parentName:"p"},"signatures")," holds a map of\neach user in the ",(0,i.kt)("inlineCode",{parentName:"p"},"must_sign_user_ids")," to their digital signature."),(0,i.kt)("p",null,"The signature is computed using the ",(0,i.kt)("inlineCode",{parentName:"p"},"alice")," private key as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'./bin/signer -privatekey=deployment/sample/crypto/alice/alice.key -data=\'{"must_sign_user_ids":["alice"],"tx_id":"1b6d6414-9b58-45d0-9723-1f31712add81","db_operations":[{"db_name":"db2","data_writes":[{"key":"key1","value":"eXl5","acl":{"read_users":{"alice":true,"bob":true},"read_write_users":{"alice":true}}}]}]}\'\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Output")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"MEQCIAM/FYzdfVlQGWBPcyDMp2BRDyzQdTdusOl0M/UBCk2gAiAxns+4m30Y/HzlO0e0dK0HnaWhbxch5tUys0P0ME7ZPw==\n")),(0,i.kt)("p",null,"Once the above transaction gets committed, the submitter of the transaction would receive the following transaction receipt"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    },\n    "receipt": {\n      "header": {\n        "base_header": {\n          "number": 5,\n          "previous_base_header_hash": "0hi2UZF5+X4xcGhobE1akVFZ/depxYCWShukzF+KrNk=",\n          "last_committed_block_hash": "t9F0hOUPIuyk8upeQhpDpTY/wLP3yoLuA7NBqNE0HUo=",\n          "last_committed_block_num": 4\n        },\n        "skipchain_hashes": [\n          "t9F0hOUPIuyk8upeQhpDpTY/wLP3yoLuA7NBqNE0HUo=",\n          "PAFz7foMQVLrK0q1bO9TYxW9ZwUMl7rb6G3DZoSD1FY=",\n          "xz3tsHvNxVNsB709SBOJ3s2fuUXo2GciBGThc70aaTM="\n        ],\n        "tx_merkel_tree_root_hash": "UTf7CV8x9/QC9luiVwe5QzHVg9hvCHNLxWAC2iD/5Zw=",\n        "state_merkel_tree_root_hash": "+kBbsknNLNuDVKxDTktcgcJMsR9gRAHHW03plIjrTg0=",\n        "validation_info": [\n          {}\n        ]\n      }\n    }\n  },\n  "signature": "MEQCIDwJOH8ZNqs2H1rD+GWTTm03Cu1X+LcILP5NnPpmZ14LAiAJHmD4/E2noofY47eyjJm5NCcAmTUytqoB8Dat3xeVaQ=="\n}\n')),(0,i.kt)("h3",{id:"checking-the-existance-of-the-state"},"Checking the existance of the state"),(0,i.kt)("p",null,"Let's query the node to see whether ",(0,i.kt)("inlineCode",{parentName:"p"},"key1")," exists. The query can be submitted by either ",(0,i.kt)("inlineCode",{parentName:"p"},"alice")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"bob")," as both have\nthe read permission to this key. No one else can read ",(0,i.kt)("inlineCode",{parentName:"p"},"key1")," including the admin user of the node. In this example,\nwe use ",(0,i.kt)("inlineCode",{parentName:"p"},"bob")," to query the key."),(0,i.kt)("p",null,"First, compute the bob signature on the request payload."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'./bin/signer -privatekey=deployment/sample/crypto/bob/bob.key -data=\'{"user_id":"bob","db_name":"db2","key":"key1"}\'\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Output")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"MEUCIQDm6dLmAdd0X49JygTiUkh+brZxprWSr2+hcAH+QIu3AAIgF+m7kO33YXyyqSbnXS9HR79wt/aL3JGhKvXFQaFBJms=\n")),(0,i.kt)("p",null,"Second, submit the query"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'curl \\\n     -H "Content-Type: application/json" \\\n     -H "UserID: bob" \\\n     -H "Signature: MEUCIQDm6dLmAdd0X49JygTiUkh+brZxprWSr2+hcAH+QIu3AAIgF+m7kO33YXyyqSbnXS9HR79wt/aL3JGhKvXFQaFBJms=" \\\n     -X GET http://127.0.0.1:6001/data/db2/key1 | jq .\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Output")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    },\n    "value": "eXl5",\n    "metadata": {\n      "version": {\n        "block_num": 5\n      },\n      "access_control": {\n        "read_users": {\n          "alice": true,\n          "bob": true\n        },\n        "read_write_users": {\n          "alice": true\n        }\n      }\n    }\n  },\n  "signature": "MEUCID1+8HiN9nkv8990SytuQRl8BhBV2xUEe5InsPB5D7IwAiEAx8qENDc9BQTO3arlOxPWf9lh7OP8xXFoDS+jipnAA2Y="\n}\n')),(0,i.kt)("p",null,"The result contains the ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," associated with the key and also the ",(0,i.kt)("inlineCode",{parentName:"p"},"access_control")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"version")," as part of the\n",(0,i.kt)("inlineCode",{parentName:"p"},"metadata"),"."),(0,i.kt)("h2",{id:"updating-an-existing-state"},"Updating an existing state"),(0,i.kt)("p",null,"Let's update the value of ",(0,i.kt)("inlineCode",{parentName:"p"},"key1"),". In order to do that, we need to execute the following three steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Read the ",(0,i.kt)("inlineCode",{parentName:"li"},"key1")," from the cluster."),(0,i.kt)("li",{parentName:"ol"},"Construct the updated value and transaction payload including the read version."),(0,i.kt)("li",{parentName:"ol"},"Submit the data transaction")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Note that the ",(0,i.kt)("inlineCode",{parentName:"p"},"data_reads")," should contain the version of the ",(0,i.kt)("inlineCode",{parentName:"p"},"key1")," that was read before modifying the value of ",(0,i.kt)("inlineCode",{parentName:"p"},"key1"),". If ",(0,i.kt)("inlineCode",{parentName:"p"},"data_reads")," is kept empty, the ",(0,i.kt)("inlineCode",{parentName:"p"},"data_writes")," would be considered as blind write.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},' curl \\\n   -H "Content-Type: application/json" \\\n   -H "TxTimeout: 2s" \\\n   -X POST http://127.0.0.1:6001/data/tx \\\n   --data \'{\n    "payload": {\n        "must_sign_user_ids": [\n            "alice"\n        ],\n        "tx_id": "1b6d6414-9b58-45d0-9723-1f31712add83",\n        "db_operations": [\n            {\n                "db_name": "db2",\n                "data_reads": [\n                    {\n                        "key": "key1",\n                        "version": {\n                            "block_num": 5\n                        }\n                    }\n                ],\n                "data_writes": [\n                    {\n                        "key": "key1",\n                        "value": "aXDUvZio",\n                        "acl": {\n                            "read_users": {\n                                "alice": true\n                            },\n                            "read_write_users": {\n                                "alice": true\n                            }\n                        }\n                    }\n                ]\n            }\n        ]\n    },\n    "signatures": {\n        "alice": "MEYCIQDFQpAI97qgNGrN/6lWM5v0Zn+ht3+4V5Mr57TIWDZFhAIhAKbatUhwr/lasFAkTydKSrDr+trEJM3KEnRWlz2kYcTV"\n    }\n}\'\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"data_reads")," holds the read key, ",(0,i.kt)("inlineCode",{parentName:"p"},"key1")," and its version ",(0,i.kt)("inlineCode",{parentName:"p"},'"block_num":5'),". Please fetch the ",(0,i.kt)("inlineCode",{parentName:"p"},"key1")," to get the version\nnumber in your setup. We have updated the ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," of the ",(0,i.kt)("inlineCode",{parentName:"p"},"key1")," and removed the user ",(0,i.kt)("inlineCode",{parentName:"p"},"bob")," from the reader's list.\nThe required signature is computed with alice private key using the following command"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'./bin/signer -privatekey=deployment/sample/crypto/alice/alice.key -data=\'{"must_sign_user_ids":["alice"],"tx_id":"1b6d6414-9b58-45d0-9723-1f31712add83","db_operations":[{"db_name":"db2","data_reads":[{"key":"key1","version":{"block_num":5}}],"data_writes":[{"key":"key1","value":"aXDUvZio","acl":{"read_users":{"alice":true},"read_write_users":{"alice":true}}}]}]}\'\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Output")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"MEYCIQDFQpAI97qgNGrN/6lWM5v0Zn+ht3+4V5Mr57TIWDZFhAIhAKbatUhwr/lasFAkTydKSrDr+trEJM3KEnRWlz2kYcTV\n")),(0,i.kt)("p",null,"Once the above transaction gets committed, the submitter of the transaction would get the following transaction receipt"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    },\n    "receipt": {\n      "header": {\n        "base_header": {\n          "number": 6,\n          "previous_base_header_hash": "paoW5AH3PRvYnFgsuQGl8eVxA2cYoeHakyHY+mIogf0=",\n          "last_committed_block_hash": "xrRU2Hy5curlSi/YafvCCeKaAb8bF9vUNGhr5usK4fc=",\n          "last_committed_block_num": 5\n        },\n        "skipchain_hashes": [\n          "xrRU2Hy5curlSi/YafvCCeKaAb8bF9vUNGhr5usK4fc="\n        ],\n        "tx_merkel_tree_root_hash": "bSgG1t1yZhOGVOrqT4LR+wXdtB/LTXvYy2De1ouaq+U=",\n        "state_merkel_tree_root_hash": "TueFaZX9xju1WimSV0g7wxuekIJ7nq6Bf+o+WNWSnkc=",\n        "validation_info": [\n          {}\n        ]\n      }\n    }\n  },\n  "signature": "MEQCIEaCKYOLUaa55VFdssKQfiFKnPY7gzm4sTw2loSTe1fnAiB5fzlYRg4dYjtjgWjHxiQHsDtHgDP+8ZSOdvJww3CSww=="\n}\n')),(0,i.kt)("h3",{id:"checking-the-existance-of-the-updated-key"},"Checking the existance of the updated key"),(0,i.kt)("p",null,"Let's query the node to see whether ",(0,i.kt)("inlineCode",{parentName:"p"},"key1")," has been updated. The query can be submitted only by ",(0,i.kt)("inlineCode",{parentName:"p"},"alice")," as ",(0,i.kt)("inlineCode",{parentName:"p"},"bob")," is\nno longer in the reader's list of the ",(0,i.kt)("inlineCode",{parentName:"p"},"key1"),". No one else can read ",(0,i.kt)("inlineCode",{parentName:"p"},"key1")," including the admin user of the node.\nIn this example, we use ",(0,i.kt)("inlineCode",{parentName:"p"},"alice")," to query the key."),(0,i.kt)("p",null,"First, compute the alice signature on the request payload."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'./bin/signer -privatekey=deployment/sample/crypto/alice/alice.key -data=\'{"user_id":"alice","db_name":"db2","key":"key1"}\'\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Output")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"MEYCIQDUVfuDVppJ2BLuiD662M4iuBYdn2E2ttyspZo6UXYmNgIhAOEvZTdRe7d9/bkVliplmpFHeypKbz7wMHPluGYipqvw\n")),(0,i.kt)("p",null,"Second, submit the query"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'curl \\\n     -H "Content-Type: application/json" \\\n     -H "UserID: alice" \\\n     -H "Signature: MEYCIQDUVfuDVppJ2BLuiD662M4iuBYdn2E2ttyspZo6UXYmNgIhAOEvZTdRe7d9/bkVliplmpFHeypKbz7wMHPluGYipqvw" \\\n     -X GET http://127.0.0.1:6001/data/db2/key1 | jq .\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Output")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    },\n    "value": "aXDUvZio",\n    "metadata": {\n      "version": {\n        "block_num": 6\n      },\n      "access_control": {\n        "read_users": {\n          "alice": true\n        },\n        "read_write_users": {\n          "alice": true\n        }\n      }\n    }\n  },\n  "signature": "MEYCIQDbtOQex0Ea8ZrFEcfHGS/swsPo8uSHVspB9MujnZbkFwIhANwrtGYyuIgJvXt4cI9pM2qQ/xWSQZz8oOjHGcHx3SCP"\n}\n')),(0,i.kt)("p",null,"The result contains the ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," associated with the key and also the ",(0,i.kt)("inlineCode",{parentName:"p"},"access_control")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"version")," as part of the\n",(0,i.kt)("inlineCode",{parentName:"p"},"metadata"),". In the update state, we can find that the ",(0,i.kt)("inlineCode",{parentName:"p"},"value"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"version"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"access_control")," have changed."),(0,i.kt)("h2",{id:"deleting-an-existing-state"},"Deleting an existing state"),(0,i.kt)("p",null,"Let's delete the key ",(0,i.kt)("inlineCode",{parentName:"p"},"key1"),". In order to do that, we need to execute the following three steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Read the ",(0,i.kt)("inlineCode",{parentName:"li"},"key1")," from the cluster. If we want to blidly delete ",(0,i.kt)("inlineCode",{parentName:"li"},"key1"),", this step can be avoided and also, the read version is not needed."),(0,i.kt)("li",{parentName:"ol"},"Construct the transaction payload including the read version."),(0,i.kt)("li",{parentName:"ol"},"Submit the data transaction")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Note that the ",(0,i.kt)("inlineCode",{parentName:"p"},"data_reads")," should contain the version of the ",(0,i.kt)("inlineCode",{parentName:"p"},"key1")," that was read before modifying the value of ",(0,i.kt)("inlineCode",{parentName:"p"},"key1"),". If ",(0,i.kt)("inlineCode",{parentName:"p"},"data_reads")," is left out, the delete would be applied blindly.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},' curl \\\n   -H "Content-Type: application/json" \\\n   -H "TxTimeout: 2s" \\\n   -X POST http://127.0.0.1:6001/data/tx \\\n   --data \'{\n    "payload": {\n        "must_sign_user_ids": [\n            "alice"\n        ],\n        "tx_id": "1b6d6414-9b58-45d0-9723-1f31712add85",\n        "db_operations": [\n            {\n                "db_name": "db2",\n                "data_reads": [\n                    {\n                        "key": "key1",\n                        "version": {\n                            "block_num": 6\n                        }\n                    }\n                ],\n                "data_deletes": [\n                    {\n                        "key": "key1"\n                    }\n                ]\n            }\n        ]\n    },\n    "signatures": {\n        "alice": "MEQCIATEMJZ2HYkQtG+ivADylvJRzaksTum3/jN0zeg96+CuAiAEYKugmTbPbHXsjKnAWOLirNqI0WWOPcLN9jIlVaeseQ=="\n    }\n}\'\n')),(0,i.kt)("p",null,"The transaction should be submitted by ",(0,i.kt)("inlineCode",{parentName:"p"},"alice")," as only she has the write permission which is required for the delete operation too.\nThe ",(0,i.kt)("inlineCode",{parentName:"p"},"db_operations")," holds the ",(0,i.kt)("inlineCode",{parentName:"p"},"data_reads")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"key1")," and version ",(0,i.kt)("inlineCode",{parentName:"p"},'"block_num":5'),". The ",(0,i.kt)("inlineCode",{parentName:"p"},"data_deletes")," list contains the key ",(0,i.kt)("inlineCode",{parentName:"p"},"key1"),".\nThe signature is computed using the following command"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'./bin/signer -privatekey=deployment/sample/crypto/alice/alice.key -data=\'{"must_sign_user_ids":["alice"],"tx_id":"1b6d6414-9b58-45d0-9723-1f31712add85","db_operations":[{"db_name":"db2","data_reads":[{"key":"key1","version":{"block_num":6}}],"data_deletes":[{"key":"key1"}]}]}\'\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Output")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"MEQCIATEMJZ2HYkQtG+ivADylvJRzaksTum3/jN0zeg96+CuAiAEYKugmTbPbHXsjKnAWOLirNqI0WWOPcLN9jIlVaeseQ==\n")),(0,i.kt)("p",null,"Once the above transaction gets committed, the submitting user would get the following transaction receipt"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "response": {\n    "header": {\n      "node_id": "bdb-node-1"\n    },\n    "receipt": {\n      "header": {\n        "base_header": {\n          "number": 7,\n          "previous_base_header_hash": "E1QGMExoA6Nt2MEk9GBE+NHDCzpVR4YuBBeYMZONbKU=",\n          "last_committed_block_hash": "WwuMQlvM05Kd/jh+6iD0Kt8ZxMXEdC1wEOk0wzxCBfc=",\n          "last_committed_block_num": 6\n        },\n        "skipchain_hashes": [\n          "WwuMQlvM05Kd/jh+6iD0Kt8ZxMXEdC1wEOk0wzxCBfc=",\n          "xrRU2Hy5curlSi/YafvCCeKaAb8bF9vUNGhr5usK4fc="\n        ],\n        "tx_merkel_tree_root_hash": "vobaBbri1K+lJv+rXYXRofWuQ0D+SDMGKaBwkTtXQQ0=",\n        "state_merkel_tree_root_hash": "jYpTKUQBA7dJZYlzz7gEZWqX503EqGC+z+9pOKJsDKQ=",\n        "validation_info": [\n          {}\n        ]\n      }\n    }\n  },\n  "signature": "MEYCIQDgtHEC+7gaOGsOQbFWOqeCQW5yOrwgDsZI+aZnGu+sogIhAPv+Emp+WxHjUl0ZoSw9mpF50udpTUyI+YqnRXnvn+UA"\n}\n')),(0,i.kt)("h3",{id:"checking-the-non-existance-of-the-deleted-key"},"Checking the non-existance of the deleted key"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'./bin/signer -privatekey=deployment/sample/crypto/alice/alice.key -data=\'{"user_id":"alice","db_name":"db2","key":"key1"}\'\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"MEUCIQCQWTeWyDwbj2ARFHQTH3pgsplOTrpW6XaC8mC/TODaJgIgIplpD5DB/SSNmhh42qLpITCJc66Z75mcHP3AWsS3zcw=\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'curl \\\n     -H "Content-Type: application/json" \\\n     -H "UserID: alice" \\\n     -H "Signature: MEUCIQCQWTeWyDwbj2ARFHQTH3pgsplOTrpW6XaC8mC/TODaJgIgIplpD5DB/SSNmhh42qLpITCJc66Z75mcHP3AWsS3zcw=" \\\n     -X GET http://127.0.0.1:6001/data/db2/key1 | jq .\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Output")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "response": {\n    "header": {\n      "nodeID": "bdb-node-1"\n    }\n  }\n  "signature": "MEYCIQCVdcbqmwIQDLkwYiK2tmOMwHI0GbWFX6kMMPo4VBORpgIhAMBBvsjCjL8LkogH06m58KefvnMOncLy7uFobh4XNNvI"\n}\n')),(0,i.kt)("h2",{id:"storing-updating-deleting-states-within-a-single-transaction"},"Storing, Updating, Deleting states within a single transaction"),(0,i.kt)("p",null,"We can also use ",(0,i.kt)("inlineCode",{parentName:"p"},"data_writes"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"data_deletes")," with multiple entries along with many ",(0,i.kt)("inlineCode",{parentName:"p"},"data_reads")," within a single transaction."),(0,i.kt)("h2",{id:"invalid-data-transaction"},"Invalid Data Transaction"),(0,i.kt)("p",null,"TODO (subsequent PR)"))}c.isMDXComponent=!0}}]);